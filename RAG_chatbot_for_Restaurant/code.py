# -*- coding: utf-8 -*-
"""RAG_ChatBot_for_restaurant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ihBoge6gynz6Chzpb9KKyN_GL2sw_gUu
"""

# Installing all the libraries required
!pip install -q transformers datasets faiss-cpu sentence-transformers gradio

# Importing the required Libraries and modules

import os
import numpy as np
import faiss
from sentence_transformers import SentenceTransformer
from google import genai
import gradio as gr

# Restaurant data
data = [
    "About: Lumi√®re ‚Äì Modern Indian Gourmet is a fine-dining restaurant in Mumbai. It specializes in modern Indian gourmet cuisine with regional influences from North India, Coastal India, Awadhi, and Kashmiri cooking. The restaurant follows a strict 'No Reservation, No Entry' policy.",

    "address: The restaurant is located at Level 2, The Pavilion, Palladium Mall, Lower Parel, Mumbai ‚Äì 400013.",

    "parking: Complimentary valet and secure underground parking are available. Chauffeur assistance can be requested.",

    "Operating hours or timmings: Monday to Thursday from 12:30 PM to 3:30 PM and 6:30 PM to 10:30 PM. Friday and Saturday from 12:30 PM to 3:30 PM and 6:30 PM to 11:30 PM. Sunday from 12:30 PM to 3:30 PM and 6:30 PM to 10:00 PM.",

    "Reservations must be made in advance. Contact details: Phone +91 22 4979 5678, Email reservations@lumieremumbai.com, Website www.lumieremumbai.com, WhatsApp +91 98192 45678. The restaurant allows a 15-minute grace period, caps dining at 2 hours during peak hours, and charges a cancellation fee of ‚Çπ1,500 per guest for groups of 6+. Private dining requires a minimum spend of ‚Çπ50,000.",

    "Menu highlights or menu items or menu: Starters include Dilli Chaat Reimagined (‚Çπ650), Tandoori Malai Prawn (‚Çπ1,250), and Kashmiri Morel Galouti (‚Çπ1,650). Mains include Raan-e-Lumi√®re (‚Çπ2,450), Murgh Makhani √âpic√© (‚Çπ1,650), Subz Kofta Curry (‚Çπ1,450), and Lobster Moilee (‚Çπ2,950). Breads include Truffle Butter Naan (‚Çπ350) and Roomali Roti (‚Çπ225). Rice includes Pulao-e-Noor (‚Çπ750). Desserts include Saffron Jalebi Caviar (‚Çπ650), Dark Chocolate Sandesh (‚Çπ750), and Matka Kulfi Trio (‚Çπ550). Cocktails include Curry Leaf Martini (‚Çπ750), Masala Old Fashioned (‚Çπ850), and Jamun Gin Fizz (‚Çπ695). Vegan dishes include Avocado Papdi Chaat (‚Çπ695), Jackfruit Biryani (‚Çπ1,450), Smoked Aubergine Curry (‚Çπ1,250), Coconut & Curry Leaf Stew (‚Çπ1,150), and Vegan Chocolate Mousse with Hazelnut Praline (‚Çπ650).",

    "Delivery and takeaway: Lumi√®re delivers to Colaba, Cuffe Parade, Marine Drive, Worli, Lower Parel, Mahalaxmi, and Bandra up to Khar. Delivery is free within 5 km, costs ‚Çπ200 for 5‚Äì10 km, with a minimum order of ‚Çπ2,500. Packaging is eco-friendly and temperature-controlled. Some items like souffl√© and seafood grills are dine-in only.",

    "FAQs: Jain food is available on request. Alcohol is served including cocktails and a premium wine cellar. Dress code is elegant Indian or Western chic. Walk-ins are not allowed, reservations are mandatory. Events and private dining are available. Pets are not allowed indoors, but outdoor catering can be arranged. Vegan tasting menus are available. The cuisine focus is modern Indian with both vegetarian and non-vegetarian dishes. Children are welcome until 8:00 PM; later hours are recommended for adults only.",

    "Promotions and events: Marine Drive Sundowner Cocktails on Fridays from 5:30‚Äì8:00 PM. Mumbai Masala Monday with a coastal tasting menu for ‚Çπ2,200 per guest. Wine & Spice Pairing Night on Wednesdays with a 5-course menu for ‚Çπ3,800 per guest. Chef‚Äôs Table: Lumi√®re x Legends ‚Äì monthly guest chef collaborations."
]

# Load sentence transformer model
embed_model = SentenceTransformer('all-MiniLM-L6-v2')
doc_embeddings = embed_model.encode(data, convert_to_numpy=True)

# Create FAISS index
index = faiss.IndexFlatL2(doc_embeddings.shape[1])
index.add(doc_embeddings)

# Function to perform FAISS search
def search_index(query, top_k=3):
    query_vec = embed_model.encode([query], convert_to_numpy=True)
    D, I = index.search(query_vec, top_k)
    return [data[i] for i in I[0]]

# Set up the Gemini API client
client = genai.Client(api_key="AIzaSyCa_UvTrKIugk3epq-dWWPNcpqoEqd23sw")

# Function to generate response using Gemini API
def generate_response(query):
    context = search_index(query, top_k=3)
    prompt = f"""
    You are a helpful restaurant assistant.
    Use the following context to answer the question clearly and politely.

    Context: {' '.join(context)}
    Question: {query}
    Answer:
    """

    # Send prompt to Gemini model
    response = client.models.generate_content(
        model="gemini-2.5-flash",
        contents=prompt
    )
    return response.text

# Chatbot function
def chatbot_interface(user_query, history=[]):
    if user_query.strip() == "":
        return history, "Please enter a question."
    response = generate_response(user_query)
    history.append((user_query, response))
    return history, response

# üåå Custom CSS with translucent effect
custom_css = """
.gradio-container {
    background: linear-gradient(-45deg, #1a2a6c, #b21f1f, #fdbb2d, #ff512f);
    background-size: 400% 400%;
    animation: gradientMove 15s ease infinite;
    color: white;
    padding: 20px;

    width: 100vw;
    min-height: 100vh;
    margin: 0 !important;
    max-width: 100% !important;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
}

@keyframes gradientMove {
    0% {background-position: 0% 50%;}
    50% {background-position: 100% 50%;}
    100% {background-position: 0% 50%;}
}

/* üî≤ Chatbot history translucent */
.gr-chatbot {
    min-height: 250px !important;
    max-height: 400px !important;
    border-radius: 15px !important;
    width: 80% !important;

    background: rgba(0, 0, 0, 0.4) !important;  /* semi-transparent */
    backdrop-filter: blur(12px) !important;     /* frosted glass effect */
    border: 1px solid rgba(255, 255, 255, 0.2) !important;
    color: white !important;
}

/* ‚úçÔ∏è Input box translucent */
textarea {
    min-height: 60px !important;
    max-height: 120px !important;
    border-radius: 15px !important;
    width: 80% !important;

    background: rgba(255, 255, 255, 0.15) !important;
    backdrop-filter: blur(10px) !important;
    border: 1px solid rgba(255, 255, 255, 0.25) !important;
    color: white !important;
}

/* Buttons auto adjust */
button {
    width: 40% !important;
    border-radius: 12px !important;
    margin-top: 10px;
    background: rgba(255, 255, 255, 0.2) !important;
    backdrop-filter: blur(8px) !important;
    border: 1px solid rgba(255, 255, 255, 0.3) !important;
    color: white !important;
}
"""

# Interface
with gr.Blocks(css=custom_css) as iface:
    gr.Markdown("<h1 style='text-align: center;'>Lumi√®re Restaurant Chatbot</h1>")
    gr.Markdown("<p style='text-align: center;'>Welcome! I am pleased to help you,how can serve you today! </p>")

    chatbot = gr.Chatbot(label="Chat History")  # auto-size
    user_query = gr.Textbox(lines=2, placeholder="Type your question here...", label="Your Question")  # auto-size

    with gr.Row():
        send_btn = gr.Button("Send")
        clear_btn = gr.Button("Clear")

    # Response function
    def respond(message, history):
        if not message.strip():
            return history, "Please enter a question."
        response = generate_response(message)
        history.append((message, response))
        return history, ""

    # Trigger on Enter key
    user_query.submit(respond, [user_query, chatbot], [chatbot, user_query])

    # Trigger on Send button click
    send_btn.click(respond, [user_query, chatbot], [chatbot, user_query])

    # Clear button
    clear_btn.click(lambda: ([], ""), None, [chatbot, user_query])

iface.launch(share=True)
